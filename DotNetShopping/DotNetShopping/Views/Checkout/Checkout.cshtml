@model DotNetShopping.Models.Order
@{
    ViewBag.Title = "Checkout";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Checkout</h2>
<div class="row">
    <div class="col-sm-9">
        @using (Html.BeginForm())
        {
            <ol class="opc" id="checkoutSteps">
                <li id="opc-billing" class="section">
                    <div class="step-title">
                        <span class="number">1</span>
                        <span class="title">Billing Information</span>
                    </div>
                    <div id="checkout-step-billing" class="checkoutContent">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingFirstName, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingFirstName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingFirstName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingLastName, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingLastName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingLastName, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingCompany, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingCompany, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingCompany, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingEmail, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingEmail, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingEmail, "", new { @class = "text-danger" })
                                </div>


                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingStreet1, "Address", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingStreet1, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingStreet1, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingStreet2, "Address", new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingStreet2, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row">


                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingCountryId, "Billing Country", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.DropDownList("BillingCountryId", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.BillingCountryId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingStateId, "Billing State", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.DropDownList("BillingStateId", null, htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.BillingStateId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">


                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingCityId, "Billing City", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.DropDownList("BillingCityId",null, htmlAttributes : new { @class = "form-control" } )
                                    @Html.ValidationMessageFor(model => model.BillingCityId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-sm-6">
                                <div class="input-label">
                                    @Html.LabelFor(model => model.BillingZip, "Billing Zip", htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="input-editor">
                                    @Html.EditorFor(model => model.BillingZip, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BillingZip, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>


                    </div>


                </li>


                <li id="opc-shipping" class="section">
                    <div class="step-title">
                        <span class="number">2</span>
                        <span class="title">Shipping Information</span>
                    </div>
                    <div id="checkout-step-shipping" class="step a-item" style="display:none;">

                    </div>
                </li>
                <li id="opc-shipping_method" class="section">
                    <div class="step-title">
                        <span class="number">3</span>
                        <span class="title">Shipping Method</span>
                    </div>
                    <div id="checkout-step-shipping_method" class="step a-item" style="display:none;">
                    </div>
                </li>
                <li id="opc-payment" class="section">
                    <div class="step-title">
                        <span class="number">4</span>
                        <span class="title">Payment Information</span>
                    </div>
                    <div id="checkout-step-payment" class="step a-item" style="display:none;">
                    </div>
                </li>
                <li id="opc-review" class="section">
                    <div class="step-title">
                        <span class="number">5</span>
                        <span class="title">Order Review</span>
                    </div>
                    <div id="checkout-step-review" class="step a-item" style="display:none;">
                    </div>
                </li>
            </ol>
            <input type="submit" value="Submit" class="btn btn-default" />
        }
    </div>
    <div class="col-sm-3">
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>
    @section scriptsready{
        //Get States
        $("#BillingCountryId").change(function () {
            var countryId = this.value;
        $('#BillingStateId').empty();
            if (countryId > 0) {
                var dataToPost = {
                    CountryId: countryId
                };
                $.post('/Api/GetStatesFor', dataToPost)
                    .done(function (response, status, jqxr) {
                        if (response['States'].length > 0) {
                            $('#BillingStateId').prop("disabled", false);
                            $('#BillingStateId').append($("<option />").val(0).text('Select Country'));

                        }
                        else {
                            $('#BillingStateId').append($("<option />").val(0).text('No State'));
                            $('#BillingStateId').prop("disabled", true);

                        }
                        $.each(response.States, function () {
                            $('#BillingStateId').append($("<option />").val(this.StateId).text(this.Name))
                        })
                    })
                    .fail(function (jqxhr, status, error) {
                        alert(error);
                    })
            } else {
            }
    })
        //Get Cities
        $("#BillingCountryId").change(function () {
        var countryId = this.value;
        $('#BillingCityId').empty();
        if (countryId > 0) {
            var dataToPost = {
                CountryId: countryId
            };
            $.post('/Api/GetCitiesFor', dataToPost)
                .done(function (response, status, jqxhr) {
                    if (response['Cities'].length > 0) {
                        $('#BillingCityId').prop("disabled", false);
                        //$('#BillingCityId').append($("<option />").val(0).text("Select Country"));
                    }
                    else {
                        $('#BillingCityId').append($("<option />").val(0).text('No City'));
                        $('#BillingCityId').prop("disabled", true);
                    }
                    $.each(response.Cities, function () {
                        $('#BillingCityId').append($("<option />").val(this.CityId).text(this.Name))
                    })
                })
                .fail(function (jqxhr, status, error) {
                    alert(error);
                });
        }
    });


    }

</script>